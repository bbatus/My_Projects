name: Deploy static site to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

name: Deploy Portfolio to GitHub Pages

on:
  # Main branch'e push olduğunda çalış
  push:
    branches: [ main, master ]
  
  # Pull request'lerde test et (deploy etme)
  pull_request:
    branches: [ main, master ]
  
  # Manuel olarak çalıştırma imkanı
  workflow_dispatch:

# GitHub Pages için gerekli permissions
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrent deployment'ları engelle
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js (optional, for future enhancements)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        continue-on-error: true
        
      - name: Validate JSON files
        run: |
          echo "🔍 JSON dosyaları kontrol ediliyor..."
          
          # projects.json kontrolü
          if [ -f "data/projects.json" ]; then
            echo "✅ projects.json bulundu"
            if ! python3 -m json.tool data/projects.json > /dev/null; then
              echo "❌ projects.json geçersiz JSON formatında"
              exit 1
            fi
            echo "✅ projects.json geçerli"
          else
            echo "⚠️ projects.json bulunamadı"
          fi
          
          # config.json kontrolü
          if [ -f "data/config.json" ]; then
            echo "✅ config.json bulundu"
            if ! python3 -m json.tool data/config.json > /dev/null; then
              echo "❌ config.json geçersiz JSON formatında"
              exit 1
            fi
            echo "✅ config.json geçerli"
          else
            echo "⚠️ config.json bulunamadı"
          fi
          
      - name: Validate HTML
        run: |
          echo "🔍 HTML dosyaları kontrol ediliyor..."
          
          # index.html varlık kontrolü
          if [ -f "index.html" ]; then
            echo "✅ index.html bulundu"
            
            # Temel HTML yapı kontrolü
            if grep -q "<!DOCTYPE html>" index.html && \
               grep -q "<html" index.html && \
               grep -q "</html>" index.html && \
               grep -q "<head>" index.html && \
               grep -q "</head>" index.html && \
               grep -q "<body>" index.html && \
               grep -q "</body>" index.html; then
              echo "✅ HTML yapısı geçerli"
            else
              echo "❌ HTML yapısı eksik veya hatalı"
              exit 1
            fi
          else
            echo "❌ index.html bulunamadı"
            exit 1
          fi
          
      - name: Check JavaScript files
        run: |
          echo "🔍 JavaScript dosyaları kontrol ediliyor..."
          
          # Temel JS dosyalarının varlığını kontrol et
          js_files=(
            "assets/js/main.js"
            "assets/js/utils/DataLoader.js"
            "assets/js/components/ThemeManager.js"
            "assets/js/components/MediaHandler.js"
            "assets/js/components/ProjectCard.js"
            "assets/js/components/ProjectGrid.js"
            "assets/js/components/Navigation.js"
          )
          
          for file in "${js_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file bulundu"
            else
              echo "⚠️ $file bulunamadı"
            fi
          done
          
      - name: Check CSS files
        run: |
          echo "🔍 CSS dosyaları kontrol ediliyor..."
          
          if [ -f "assets/css/custom.css" ]; then
            echo "✅ custom.css bulundu"
          else
            echo "⚠️ custom.css bulunamadı"
          fi
          
      - name: Optimize images (if any)
        run: |
          echo "🖼️ Resim optimizasyonu kontrol ediliyor..."
          
          # assets/images klasöründeki resimleri listele
          if [ -d "assets/images" ]; then
            echo "📁 assets/images klasörü bulundu"
            find assets/images -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" \) | head -10
          else
            echo "📁 assets/images klasörü bulunamadı"
          fi
          
      - name: Create deployment info
        run: |
          echo "📝 Deployment bilgileri oluşturuluyor..."
          
          # Deployment timestamp
          echo "DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-info.txt
          echo "COMMIT_SHA=${GITHUB_SHA}" >> deployment-info.txt
          echo "COMMIT_REF=${GITHUB_REF}" >> deployment-info.txt
          echo "WORKFLOW_RUN_ID=${GITHUB_RUN_ID}" >> deployment-info.txt
          
          # Dosya sayıları
          echo "HTML_FILES=$(find . -name "*.html" | wc -l)" >> deployment-info.txt
          echo "JS_FILES=$(find . -name "*.js" | wc -l)" >> deployment-info.txt
          echo "CSS_FILES=$(find . -name "*.css" | wc -l)" >> deployment-info.txt
          echo "JSON_FILES=$(find . -name "*.json" | wc -l)" >> deployment-info.txt
          
          cat deployment-info.txt
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

  # Deploy job (sadece main/master branch'te)
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment success notification
        run: |
          echo "🚀 Deployment başarılı!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ Deployment zamanı: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🔗 Commit: ${GITHUB_SHA}"